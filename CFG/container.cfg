######################################### RUN / LINK  -2-  CONTAINERS
#docker run --link mongo_deamon:db -v /extra:/extra -i -t -e HOME=/home/gitlab_ci_runner -e CI_SERVER_URL=http://ci0.mean.io -e REGISTRATION_TOKEN=71f4b1fe380484bc57ad -e GITLAB_SERVER_FQDN=git.mean.io brownman/onbuild bash -c i
detect_running(){
    local exp=${1:-sel};
    local str=$( docker ps | awk '{print $11}' | grep $exp | cut -d',' -f1 )
        echo $str
}

run_selenium(){
#commander $dir_root/TMP/link.sh
#docker pull vvoyer/docker-selenium-firefox-chrome  

    local cmd_env="-e SCREEN='Record VNC'"
        commander test -v alias_selenium
        commander test -n "$alias_selenium"
#commander docker run $volume_tmp $volume_build --privileged -p 5999:5999 -p 4444:4444 -d --name $alias_selenium $CONTAINER_SEL2
commander docker run --privileged $cmd_env $volume_share $volume_build $volume_tmp -p 4444:4444 -p 5999:5999 -d --name $alias_selenium lewisw/selenium
#commander docker run --privileged $cmd_env $volume_build $volume_tmp -p 4444:4444 -p 5999:5999 -d --name $alias_selenium lewisw/selenium


#docker pull vvoyer/docker-selenium-firefox-chrome
#docker run --privileged -p 4444:4444 -p 5999:5999 -d vvoyer/docker-selenium-firefox-chrome 

#docker run --privileged -p 4444:4444 -p 5999:5999 -d vvoyer/docker-selenium-firefox-chrome  

#docker run --privileged -p 4444:4444 -d --name selenium$(date +%s) eperoumalnaik/docker-chrome-selenium && { docker ps; }

}

run_tests(){
    local file_test="${1:-$dir_root/tests/tests.sh}"
        local flag_docker=${2:-'-i'}
    local exp='sel'
        local alias_selenium="$alias_selenium"
#$( detect_running "$exp" )

        test -v alias_selenium || { trace "[err] can not detect alias which match $exp"; exit 0; }

    commander test -n "$alias_selenium"
        local container=$CONTAINER_APP
#  commander "docker run --link $alias_selenium:selenium $volume_extra  $opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'"
#local port=4444
#local port_vlc=5999
#local cmd_ports="-p $port:$port -p $port_vlc:$port_vlc"
#local name_const=selenium
        local cmd_link="--link $alias_selenium:$name_const"
        local cmd_volume="$volume_extra"
        commander "docker run $volume_tmp2 $cmd_volume $cmd_link $flag_docker $container bash < $file_test"
}


run_gitlab_multi_runner(){

local cmd_apparmor='-v /usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0:/lib/x86_64-linux-gnu/libapparmor.so.1'
    local cmd_start="${1:-'env'}"
        local flag_docker="${2:-'-i'}"
        test -v alias_selenium
        test -v alias_mongo
        test -d /tmp/22 && { \
            mv /tmp/22 "/tmp/22/$(date +%s)";
        }
        #test -d /tmp/keep || { mkdir -p /tmp/keep; }
#( detect_running )
#commander "docker run --link $alias_mongo:db --link $alias_selenium:selenium $volume_tmp2 $volume_extra  $opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'" #with mongo
    #    commander "docker run --name onbuild \


     commander cat /srv/gitlab-runner/config/*
     sleep 2
 commander docker run -d --name gitlab-runner \
 --restart always \
--privileged=true $cmd_apparmor -v /var/run/docker.sock:/var/run/docker.sock \
           -v $(which docker):/usr/bin/docker \
        $volume_ssh  \
        $volume_extra   \
--link $alias_selenium:selenium  \
               -v /var/run/docker.sock:/var/run/docker.sock \
                       -v /srv/gitlab-runner/config:/etc/gitlab-runner \
                                 gitlab/gitlab-runner:latest

 docker exec  gitlab-runner adduser gitlab-runner sudo
docker exec  gitlab-runner  bash -c 'echo "gitlab-runner ALL=NOPASSWD: ALL" > /etc/sudoers.d/gitlab-runner'

# docker exec  gitlab-runner adduser gitlab-runner sudo apt-get install nodejs 



   #  trace echo -e "https://ci0.gitlab.linnovate.net\n481f4cbc1a5420db0340\ngitlab-runner\ndocker\nruby:2.1\n\n\n\n" | docker exec -i gitlab-runner gitlab-runner register


     #echo docker exec -it gitlab-runner gitlab-runner register



       # --link $alias_selenium:selenium 
        #$volume_tmp2 
        #$opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'"
         #  -v /tmp/keep:/tmp \
         #https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/docker.md


      docker exec -it gitlab-runner gitlab-runner --debug run

}
run_webapp(){

local cmd_apparmor='-v /usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0:/lib/x86_64-linux-gnu/libapparmor.so.1'
    local cmd_start="${1:-'env'}"
        local flag_docker="${2:-'-i'}"
        test -v alias_selenium
        test -v alias_mongo
        test -d /tmp/22 && { \
            mv /tmp/22 "/tmp/22/$(date +%s)";
        }
        #test -d /tmp/keep || { mkdir -p /tmp/keep; }
#( detect_running )
#commander "docker run --link $alias_mongo:db --link $alias_selenium:selenium $volume_tmp2 $volume_extra  $opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'" #with mongo
        commander "docker run --name onbuild \
--privileged=true $cmd_apparmor -v /var/run/docker.sock:/var/run/docker.sock \
           -v $(which docker):/usr/bin/docker \
        --link $alias_selenium:selenium $volume_ssh $volume_tmp2 $volume_extra  $opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'"
         #  -v /tmp/keep:/tmp \



}


run_webapp_old(){
    local cmd_start="${1:-'env'}"
        local flag_docker="${2:-'-i'}"
        commander "docker run --link $alias_mongo:db $volume_extra  $opts_gitlab $flag_docker -t $CONTAINER_APP bash -c '$cmd_start'"
}


run_webapp_deamon(){
    set -u
        local cmd='. ~/.profile && $HOME/runner/bin/setup_and_run'
        local	flag_docker='-d'
        run_webapp "$cmd" "$flag_docker"
}

run_webapp_interactive(){
    set -u
        local cmd='bash'
        local	flag_docker='-i --rm'
        run_webapp "$cmd" "$flag_docker"
}

run_mongo(){
#use ensure
    test -d /data/db || { mkdir -p /data/db; }
    commander "docker run $volume_data $flag_ports_mongo -d --name $alias_mongo $CONTAINER_DB sh -c 'mongod $flag_mongo'"; 
}



run_mongo_wrapper(){
    ( ensure mongo_container_alive ) || { commander_exit run_mongo; }
    ensure mongo_container_alive
}



run_mysql(){
#https://hub.docker.com/r/mysql/mysql-server/
#docker run --name $alias_mysql -e MYSQL_ROOT_PASSWORD=$password_mysql -d $CONTAINER_MYSQL

#https://coreos.com/products/enterprise-registry/docs/latest/mysql-container.html
    MYSQL_USER="$user_mysql"
        MYSQL_DATABASE="$db_name_mysql"
        MYSQL_CONTAINER_NAME="$alias_mysql"
        MYSQL_ROOT_PASSWORD=${password_root_mysql}
    MYSQL_PASSWORD=${password_mysql}
#Do not edit these values: (creates a 32 char password for the MySQL root user and the Enterprise Registry DB user)

#MYSQL_ROOT_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | sed 1q)
#MYSQL_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | sed 1q)
#Start the MySQL container and create a new DB for the Enterprise registry:

    commander docker \
        run \
        --detach \
        --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
        --env MYSQL_USER=${MYSQL_USER} \
        --env MYSQL_PASSWORD=${MYSQL_PASSWORD} \
        --env MYSQL_DATABASE=${MYSQL_DATABASE} \
        --name ${MYSQL_CONTAINER_NAME} \
        --publish 3306:3306 \
        $CONTAINER_MYSQL;




#        docker exec -it $name bash

}



run_hadera(){

commander    docker run -v $volume_drupal --name $alias_drupal --link $alias_mysql:$alias_mysql -p 8011:80 -d $CONTAINER_HADERA


}

export -f run_hadera
export -f run_mysql
export -f run_webapp
export -f run_mongo
export -f run_mongo_wrapper
export -f run_webapp_interactive
export -f run_webapp_deamon
export -f run_selenium
export -f run_gitlab_multi_runner
